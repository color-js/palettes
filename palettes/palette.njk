---
includes: '<link rel="stylesheet" href="../style.css" />'
pagination:
  data: palettes
  resolve: values
  size: 1
  alias: palette
permalink: "palettes/{{ palette.id }}/index.html"
eleventyComputed:
  title: "{{ palette.name }}"
---

<aside id="toc">
	<ul>
		{% for id, p in palettes %}
			{% if p.id -%}
				{%- if p.id == palette.id -%}
				<li class="current" aria-label="This page">{{ p.name }}
					<ul>
						{% for hue, scale in palette.colors %}
						<li><a href="#{{ hue }}">{{ hue }}</a></li>
						{% endfor %}
					</ul>
				</li>
				{%- else -%}
				<li><a href="../{{ p.id }}">{{ p.name }}</a></li>
				{%- endif %}
			{%- endif %}
		{% endfor %}
	</ul>
</aside>

<h1>{{ palette.name }}</h1>

<table>
	<thead>
		<tr>
			<th>Hues</th>
			<th>Neutrals</th>
			<th>Steps</th>
			<th>Levels</th>
			<th>Step</th>
		</tr>
	</thead>
	<tr>
		<td>{{ palette.count.hue }}</td>
		<td>{{ palette.count.neutral }}</td>
		<td>{{ palette.levels.steps | range }}</td>
		<td>{{ palette.levels | range }}</td>
		<td>{{ palette.levels.step | range }}</td>
	</tr>
</table>

<h2>Lightness</h2>
<svg class="color-chart" viewBox="0 0 {{ palette.levels.steps.max * 10 }} 50" overflow="visible"
     style="--step-min: {{ palette.levels.step.min * 10 }}; --ticks-x: {{ palette.levels.steps.max }}">
	{% for hue, tints in palette.colors_oklch %}
		{% for level, coords in tints %}
			{% if prev_coords %}
				<line x1="{{ prev_level / palette.levels.step.max * 10 }}" y1="{{ (1 - prev_coords[0]) * 50 }}"
				      x2="{{ level / palette.levels.step.max * 10 }}" y2="{{ (1 - coords[0]) * 50 }}"
				      stroke="{{ palette.colors[hue][prev_level] }}" />
			{% endif %}
			<circle r=".5" cx="{{ level / palette.levels.step.max * 10 }}" cy="{{ (1 - coords[0]) * 50}}" fill="{{ palette.colors[hue][level] }}">
				<title>{{ hue }} {{ level }}: {{ (coords[0] * 100) | number }}%</title>
			</circle>
			{% set prev_level = level %}
			{% set prev_coords = coords %}
		{% endfor %}
	{% endfor %}
</svg>

<h2>Chroma</h2>
<svg class="color-chart" viewBox="0 0 {{ palette.levels.steps.max * 10 }} 50" overflow="visible"
     style="--ticks-x: {{ palette.levels.steps.max }}">
	{% for hue, tints in palette.colors_oklch %}
		{% for level, coords in tints %}
			{% if prev_coords %}
				<line x1="{{ prev_level / palette.levels.step.max * 10 }}" y1="{{ (1 - prev_coords[1] * 4) * 100 }}%"
				      x2="{{ level / palette.levels.step.max * 10 }}" y2="{{ (1 - coords[1] * 4) * 100 }}%"
				      stroke="{{ palette.colors[hue][prev_level] }}" />
			{% endif %}
			<circle r=".5" cx="{{ level / palette.levels.step.max * 10 }}" cy="{{ (1 - coords[1] * 4) * 100}}%" fill="{{ palette.colors[hue][level] }}">
				<title>{{ hue }} {{ level }}: {{ coords[1] | number }}</title>
			</circle>
			{% set prev_level = level %}
			{% set prev_coords = coords %}
		{% endfor %}
	{% endfor %}
</svg>

<h2>Hue</h2>
<svg class="color-chart" viewBox="0 0 {{ palette.levels.steps.max * 10 }} 72" overflow="visible"
     style="--ticks-x: {{ palette.levels.steps.max }}; --ticks-y: 36">
	{% for hue, tints in palette.colors_oklch %}
		{% for level, coords in tints %}
			{% if prev_coords %}
				<line x1="{{ prev_level / palette.levels.step.max * 10 }}" y1="{{ (360 - prev_coords[2])/3.6  }}%"
				      x2="{{ level / palette.levels.step.max * 10 }}" y2="{{ (360 - coords[2])/3.6  }}%"
				      stroke="{{ palette.colors[hue][prev_level] }}" />
			{% endif %}
			<circle r=".5" cx="{{ level / palette.levels.step.max * 10 }}" cy="{{ (360 - coords[2])/3.6 }}%" fill="{{ palette.colors[hue][level] }}">
				<title>{{ hue }} {{ level }}: {{ coords[2] | number }}</title>
			</circle>
			{% set prev_level = level %}
			{% set prev_coords = coords %}
		{% endfor %}
	{% endfor %}
</svg>

<h2>Tints & Shades</h2>
<table>
<thead>
	<tr>
		<th>Hue</th>
		<th style="width: 100%">Scale</th>
	</tr>
	<tbody>
		{% for hue, scale in palette.colors %}
			<tr id="{{ hue }}">
				<th>
					{%- if hues[hue].palette_count > 1 -%}
					<a href="../{{ hue }}/">{{ hues[hue].name }}</a>
					{%- else -%}
					{{ hue }}
					{%- endif -%}
					<small>{{ hues[hue].type }}</small>
				</th>
				<td><color-scale colors="{{ scale | serializeObject }}" coords="L: lch.l, C: lch.c, H: lch.h"></color-scale></td>
			</tr>
		{% endfor %}
	</tbody>
</thead>
</table>

